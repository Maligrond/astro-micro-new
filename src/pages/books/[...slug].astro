---
import Layout from "@layouts/Layout.astro";
import Container from "@components/Container.astro";
import BackToPrevious from "@components/BackToPrevious.astro";
import fs from 'fs';
import path from 'path';
import { marked } from 'marked';

export async function getStaticPaths() {
  const booksDir = path.join(process.cwd(), 'src/content/books');
  const files = fs.readdirSync(booksDir).filter(file => file.endsWith('.md'));
  
  const books = files.map(file => {
    const filePath = path.join(booksDir, file);
    const content = fs.readFileSync(filePath, 'utf-8');
    
    // Parse frontmatter
    const frontmatterMatch = content.match(/^---\n([\s\S]*?)\n---/);
    if (!frontmatterMatch) return null;
    
    const frontmatter = frontmatterMatch[1];
    const data = {};
    
    // Simple frontmatter parser
    frontmatter.split('\n').forEach(line => {
      const match = line.match(/^(\w+):\s*(.+)$/);
      if (match) {
        const [, key, value] = match;
        if (key === 'rating') {
          data[key] = parseInt(value);
        } else {
          data[key] = value.replace(/^["']|["']$/g, ''); // Remove quotes
        }
      }
    });
    
    return {
      id: file.replace('.md', ''),
      data
    };
  }).filter(Boolean);
  
  return books.map((book) => ({
    params: { slug: book.id },
    props: { book },
  }));
}

const { book } = Astro.props;

// Read the markdown content directly
const contentPath = path.join(process.cwd(), 'src/content/books', `${book.id}.md`);
let htmlContent = '';
try {
  const fileContent = fs.readFileSync(contentPath, 'utf-8');
  // Extract content after frontmatter
  const contentMatch = fileContent.match(/---[\s\S]*?---\n([\s\S]*)/);
  const markdownContent = contentMatch ? contentMatch[1] : '';
  // Convert markdown to HTML
  htmlContent = await marked(markdownContent);
} catch (e) {
  htmlContent = '<p>Содержимое книги не найдено.</p>';
}
---

<Layout title={book.data.title} description={`Мои впечатления о книге "${book.data.title}" автора ${book.data.author}`}>
  <Container>
    <BackToPrevious />
    
    <div class="mb-8">
      <h1 class="text-3xl font-bold text-black dark:text-white mb-2">
        {book.data.title}
      </h1>
      <p class="text-lg text-gray-600 dark:text-gray-400 mb-4">
        {book.data.author}
      </p>
      
      <div class="flex items-center gap-4 text-sm text-gray-500 dark:text-gray-400">
        <span>
          {new Date(book.data.date).toLocaleDateString('ru-RU')}
        </span>
        <span class="flex items-center gap-1">
          <span>Рейтинг:</span>
          {Array.from({ length: 5 }).map((_, i) => (
            <span class={`${i < book.data.rating ? 'text-black dark:text-white' : 'text-gray-300 dark:text-gray-600'}`}>
              ★
            </span>
          ))}
        </span>
        {book.data.url && (
          <a 
            href={book.data.url} 
            target="_blank" 
            rel="noopener noreferrer"
            class="text-blue-600 dark:text-blue-400 hover:underline"
          >
            Источник
          </a>
        )}
      </div>
    </div>

    <div class="prose prose-gray dark:prose-invert max-w-none">
      <div set:html={htmlContent} />
    </div>
  </Container>
</Layout>
